# Local variables:
# after-save-hook: org-reveal-export-to-html-and-browse
# org-reveal-title-slide: "<h1>%t</h1> <br> <h3>%a</h3> <h5>Shared Object</h5> %e"
# end:

#+Title:  Rapid prototyping with CRDTs and REPLIKATIV
#+Author: Chrislain Razafimahefa
#+Email: razafima@gmail.com

#+REVEAL_ROOT: file:./reveal.js
#+REVEAL_TRANS: none
#+REVEAL_PLUGINS: (notes)
#+REVEAL_HLEVEL: 999
#+REVEAL_HEAD_PREAMBLE: <script src="https://code.jquery.com/jquery-2.2.4.min.js"></script>
#+REVEAL_PREAMBLE: <div id="hidden" style="display:none;"> <div id="header"> <div id="header-left"></div> <div id="header-right"></div> <div id="footer-left"><img src="/Users/chrislain/workspace/teaching/assets/images/digicomp_logo.png" height="50" width="250"></div> </div>   </div>



#+OPTIONS: toc:nil
#+OPTIONS: num:nil
#+OPTIONS: reveal_center:nil
#+OPTIONS: reveal_height:900

#+OPTIONS: ^:nil                       ## Pour ne pas le laisser interpréter les _


* COMMENT TODO SPELL CHECK
* About me
**** Founder of */Shared Object Sarl/*

**** Past Adventures
***** Java
****** Compiler and VM implementation, J2EE Applications

***** Rails
***** Clojure(Script)



#+BEGIN_NOTES
HANDS UP: CRDTs, Clojure, CAP
#+END_NOTES

* Motivation
Compared to current approaches...

Will it be possible to develop distributed applications...

**** which are SIMPLER to build

**** and results in better *scalability, performance, robustness*, ...

**** COMMENT SAY: if there is anything that you can get out of this talk then remember this:
***** Soon it is going to be possible to build applications with the following properties....
**** COMMENT RELIRE: l'intro sur le site de REPLIKATIV pour avoir des idées

**** COMMENT ????? Comment développer rapidement des applications distribuées (pour le moment des prototypes) avec de jolies propriétés comme:
- liveness
- ne pas passer trop de temps sur le côté serveur
- peer-to-peer
- travailler offline
- automatic conflict resolution
- ....
* Distributed Systems
~ Multiple Machines Used For One Purpose

[[./img/distributed.png]]

   #+BEGIN_NOTES
   Has taken so much importance today:
   - big data, blockchain, etc...
   #+END_NOTES
* Replication
**** Goal
Have the same data on all replicas
**** Why
***** Increase *Availability*
- Safer systems
***** Reduce *Latency*
- Faster systems
***** Increase *Throughput*
- By increasing the number of available nodes
- Scalable systems
***** Work *Offline*
* Challenges with Replication
**** COMMENT As soon as there are updates problems arises. If we choose to synchronize the replication (i.e. wait for all the replicas to confirm that replication went well) it is going to be very slow.
If we choose to use asynchronous replication, then  => Conflicts


**** How to deal with concurrent UPDATES?
***** Synchronous / Synchronized
****** COMMENT Wait for a confirmation from other replicas before acknowledging the write to the local client
****** Strongly consistent
****** Main issues: Slow and Does not scale
***** Asynchronous
****** COMMENT Apply all the updates locally and replicate asynchronously
****** Fast and Scales
****** Main Issue: CONFLICTS


* Magic?
**** Is there a *magical* solution...

***** which *resolve conflicts* automatically
***** which is also *fast* and *scales*
* CRDTs
*Conflict-free Replicated Data Type*

[[./img/crdts_shapiro.png]]

** TODO Intuition
**** Whatever the order of the operations, whether there are concurrent operations or not, *eventually* all replicas will converge
**** Obtained by forcing operations on the data structures to have simple mathematical properties such as commutativity,...
**** COMMENT OLD
Thanks to mathematical properties => All replicas will *eventually* converge
**** COMMENT OLD
***** On est dans un contexte de multiple writers
***** Quelle est l'idée...
 - ? Quelque soit l'ordre des écritures par les différents acteurs
 - Quelque soit les partial failures
 =>  *Eventually* all replicas will converge
** Two types of CRDTs

***** Operation based

      Operations are exchanged between nodes

****** COMMENT Commutative

****** COMMENT Make sure operations are not duplicated


***** State based

States are exchanged between nodes

****** COMMENT Commutative
****** COMMENT Associative
******* COMMENT A merge may contain multiple updates so it has to be associative
****** COMMENT Idempotent



** Operation based

**** Ex.: COUNTER
[[./img/op1.png]]

***** (5 - 4 - 3) = (5 - 3 - 4)


#+BEGIN_NOTES
We have:
Value , the global state replicated to all nodes
Actions , i.e. operations applied to the values

Operations are propagated to every replicas
#+END_NOTES

** Operation based


**** If we add multiplication...
[[./img/op2.png]]

**** (5 - 4 - 3) * 2 - 1 *!=* (5 - 3 - 4 - 1) * 2

**** *COMMUTATIVITY* is key

#+BEGIN_NOTES
Other constraints:
- Must have a semantic of delivering updates only once
- Must have causal order delivery
#+END_NOTES

** State based
[[./img/merge.png]]
**** Locally states are updated by operations /f/, /g/, ...
**** States are propagated to remote replicas and *merged*

** State based: Max example
[[./img/max.png]]

**** Local operation: 'set'

**** Merge operation: 'max'

** State based: convergence
**** Only when *merge* is:

***** Commutative: a + b = b + a

***** Associative: (a + b) + c = a + (b + c)

***** Idempotent:  a + a + a = a

***** COMMENT There exists a partial order on the states

***** COMMENT Merge and update both increase the state along this order
#+begin_notes
#+end_notes

**  Set

**** Naive approach, i.e. like sequential version

***** When lucky:
[[./img/op-set-naive-ok.png]]


** Set
***** When Not lucky:
[[./img/op-set-naive-notok.png]]


#+BEGIN_NOTES
A more advanced data structure
#+END_NOTES

** Observed-Remove Set

**** Add a tag on each replica to uniquely identify set elements
  [[./img/or-set.png]]

**** When concurrent 'add and 'remove, OR-Set favors 'add
** Available CRDTs
**** Counter
**** Map
**** Set
**** Ordered Set
**** Graph
**** ...
**  JSON CRDTs
**** Based on recent work by Kleppmann & co.
[[./img/json-crdts.png]]

** Example
[[./img/ex-json-crdts.png]]
**** COMMENT TODO Prepare commentaires for the picture
**** Implementation
https://github.com/automerge

**  Usage in Industry
**** Riak, Soundcloud, Cassandra
**** Programming language: Lasp
* REPLIKATIV

**** C. Weilbach's Motivation

***** Clone app state/data like we clone code with git

***** Free data from cloud and vendor lock-in

***** Ultimate goal: statistical analysis

** What is it?
***** For development of distributed applications
***** Based on replicated data types:  CRDTs
***** Can be seen as a distributed database
***** Clojure(Script)

** Noticeable Features

**** Strong eventual consistency
***** No synchronization
****** No talk to other peers before updating
**** Scalability
**** Availability -> Work offline
**** No distinction between client and server
**** Works in browsers, servers and mobile devices
**** Works on JS and JVM environments
**** Updates propagated automatically in both directions
**** Peer-to-peer
**** Gossip like protocol
**** Functional code-base

** Architecture
[[./img/architecture-replikativ.png]]
** Available CRDTs
**** map
**** set
**** cdvcs
**** lww
**** Soon: EDN i.e JSON in Clojure
** Usage Illustration
An simple app that capture task lengths in a project
[[./img/demo.png]]
** SERVER
#+BEGIN_SRC clojure -n
(defn start-server []
  (let [uri   "ws://127.0.0.1:31778"
        store (<?? S (new-mem-store))
        peer  (<?? S (server-peer S store uri))]
    (run-server #'base-routes {:port 8080})
    (<?? S (start peer))
    (<?? S (chan))))
#+END_SRC

** Front end

#+begin_src clojure -n
(def user "mail:alice@stechuhr.de")
(def ormap-id #uuid "07f6aae2-2b46-4e44-bfd8-058d13977a8a")
(def uri "ws://127.0.0.1:31778")
(defonce val-atom (atom {:captures #{}}))

(defn setup-replikativ []
  (go-try
   S
   (let [store  (<? S (new-mem-store))
         peer   (<? S (client-peer S store))
         stage  (<? S (create-stage! user peer))
         stream (stream-into-identity stage
                                      [user ormap-id]
                                      stream-eval-fns
                                      val-atom)]
     (<? S (s/create-ormap! stage
                            :description "captures"
                            :id ormap-id))
     (connect! stage uri)
     {:store  store
      :stage  stage
      :stream stream
      :peer   peer})))
#+end_src

** Front End

  #+BEGIN_SRC clojure -n
(def stream-eval-fns
  {'add (fn [S a new]
            (swap! a update-in [:captures] conj new)
            a)
   'remove (fn [S a new]
             (swap! a update-in [:captures] disj new)
             a)})

(defn add-capture! [state capture]
  (s/assoc! (:stage state)
            [user ormap-id]
            (uuid capture)
            [['add capture]]))
#+end_src


** UI
#+attr_html: :height 750px
[[./img/ui-code.png]]

** Demo
#+begin_notes
video: http://replikativ.io/doc/applications.html or https://www.youtube.com/watch?v=LW8v6Cr9BcM&feature=youtu.be

43'36''

#+end_notes

* Conclusion

**** Saw overview of CRDTs and REPLIKATIV

**** Makes app dev a lot simpler
***** No need to deal with IO anymore
****** No client or server networking dev needed
***** Just work on your local state and the rest is taken care of
***** No big stack to learn
***** No app to install


* Questions?
* Thanks
**** C. Weilbach
**** K. Khüne
**** Martin Kleppmann
**** Arnout Engelen
* Extra slides
** TODO References

* COMMENT TODO spell check
