# Local variables:
# after-save-hook: org-reveal-export-to-html-and-browse
# org-reveal-title-slide: "<h1>%t</h1> <br> <h3>%a</h3> <h5>Shared Object</h5> %e"
# end:

#+Title:  Rapid prototyping with CRDTs and REPLIKATIV
#+Author: Chrislain Razafimahefa
#+Email: razafima@gmail.com

#+REVEAL_ROOT: ./reveal.js
#+REVEAL_TRANS: none
#+REVEAL_PLUGINS: (notes)
#+REVEAL_HLEVEL: 999

#+OPTIONS: toc:nil
#+OPTIONS: num:nil
#+OPTIONS: reveal_center:nil
#+OPTIONS: reveal_height:900
#+OPTIONS: ^:nil                       ## Pour ne pas le laisser interpréter les _


* About me
**** Founder of */Shared Object Sarl/*

**** Past Adventures
***** Java, Rails, Clojure(Script)

***** Web app, Distributed systems, J2EE Applications, Compiler and VM implementation

#+BEGIN_NOTES
HANDS UP: CRDTs, Clojure, CAP
#+END_NOTES

* Motivation
Compared to current approaches...

Will it be possible to develop distributed applications...

**** which are SIMPLER to build

**** and results in better *scalability, performance, robustness*, ...

**** COMMENT SAY: if there is anything that you can get out of this talk then remember this:
***** Soon it is going to be possible to build applications with the following properties....
**** COMMENT RELIRE: l'intro sur le site de REPLIKATIV pour avoir des idées

**** COMMENT ????? Comment développer rapidement des applications distribuées (pour le moment des prototypes) avec de jolies propriétés comme:
- liveness
- ne pas passer trop de temps sur le côté serveur
- peer-to-peer
- travailler offline
- automatic conflict resolution
- ....
* Distributed Systems
~ Multiple Machines Used For One Purpose

[[./img/distributed.png]]

   #+BEGIN_NOTES
   Has taken so much importance today:
   - big data, blockchain, etc...
   #+END_NOTES
* Replication
**** Goal
Have the same data on all replicas
**** Why
***** Increase *Availability*
- Safer systems
***** Reduce *Latency*
- Faster systems
***** Increase *Throughput*
- By increasing the number of available nodes
- Scalable systems
***** Work *Offline*
* Challenges with Replication
#+attr_html: :height 250px
[[./img/distributed.png]]

**** How to deal with concurrent UPDATES?

***** Synchronous / Synchronized
****** COMMENT Wait for a confirmation from other replicas before acknowledging the write to the local client
****** Strongly consistent
****** Main issues: Slow and Does not scale
***** Asynchronous
****** COMMENT Apply all the updates locally and replicate asynchronously
****** Fast and Scales
****** Main Issue: CONFLICTS


* Magic?
**** Is there a *magical* solution...

***** which *resolve conflicts* automatically
***** which is also *fast* and *scales*
* CRDTs
*Conflict-free Replicated Data Type*

[[./img/crdts_shapiro.png]]

** Intuition
**** Whatever the order of the operations
***** Whether there are concurrent operations or not
***** *Eventually* all replicas will converge
**** Can be seens as either:
***** Conflicts are automatically resolved
***** Or by design there are no conflicts
**** Key: mathematical properties imposed on data structures

**** COMMENT OLD
Thanks to mathematical properties => All replicas will *eventually* converge
**** COMMENT OLD
***** On est dans un contexte de multiple writers
***** Quelle est l'idée...
 - ? Quelque soit l'ordre des écritures par les différents acteurs
 - Quelque soit les partial failures
 =>  *Eventually* all replicas will converge
** Two types of CRDTs

***** Operation based

      Operations are exchanged between nodes

****** COMMENT Commutative

****** COMMENT Make sure operations are not duplicated


***** State based

States are exchanged between nodes

****** COMMENT Commutative
****** COMMENT Associative
******* COMMENT A merge may contain multiple updates so it has to be associative
****** COMMENT Idempotent



** Operation based

**** Ex.: COUNTER
[[./img/op1.png]]

***** (5 - 4 - 3) = (5 - 3 - 4)


#+BEGIN_NOTES
We have:
Value , the global state replicated to all nodes
Actions , i.e. operations applied to the values

Operations are propagated to every replicas
#+END_NOTES

** Operation based


**** Suppose we add multiplication...
[[./img/op2.png]]

**** 5 -4 -3 *2 -1 != 5 -3 -4 -1 *2

**** *COMMUTATIVITY*

***** The operations *order* is key

 #+BEGIN_NOTES
 Other constraints:
 - Must have a semantic of delivering updates only once
 - Must have causal order delivery

 Pour que ca soit commutatif, faut que:
 (State * op1) * op2 = (State * op2) * op1

 e.g.: (10 -1) * 2 != (10 *2) -1

 Ce qu'il faut bien voir ici est que ce qu'on appelle operation est op1 et op2, càd -1 et *2 ds l'ex. Les opérations ici ne sont pas * et + mais bien -1 et *2, qui sont aussi différents des op. -23, +34 et /3.
 #+END_NOTES

** State based
   [[./img/merge.png]]
**** Operations are applied locally
**** *States* are propagated and *merged*

** State based: Max example
   [[./img/max.png]]

**** Invariant: 'max'
**** Local operation: 'set'

**** Merge operation: 'max'

#+BEGIN_NOTES
Important: l'illustration du merge

#+END_NOTES


** State based: convergence
**** Only when *merge* is:

***** Commutative: a + b = b + a

***** Associative: (a + b) + c = a + (b + c)

***** Idempotent:  a + a + a = a


#+BEGIN_NOTES
Other required condition:
- There exists a partial order on the states

- Merge and update both increase the state along this order
- I.e. join semilattice

Insights:
- Commutativity: states can arrive in any order
- Associativity: states arrives in the *same* order but merge done in any order
- Idempotent: same state can arrive again and again
#+END_NOTES
**  Set

**** Naive approach, i.e. like sequential version

***** When lucky:
      [[./img/op-set-naive-ok.png]]


** Set
***** When Not lucky:
      [[./img/op-set-naive-notok.png]]


      #+BEGIN_NOTES
      A more advanced data structure
      #+END_NOTES

** Observed-Remove Set

**** Add a tag on each replica to uniquely identify set elements
     [[./img/or-set.png]]

**** When concurrent 'add and 'remove, OR-Set favors 'add
** Available CRDTs
**** Counter
**** Map
**** Set
**** Ordered Set
**** Graph
**** ...
**  JSON CRDTs
**** Based on recent work by Kleppmann & co.
     [[./img/json-crdts.png]]

** Example
   [[./img/ex-json-crdts.png]]
**** COMMENT TODO Prepare commentaires for the picture
**** Implementation
     https://github.com/automerge

**  Usage in Industry
**** Riak, Soundcloud, Cassandra
**** Programming language: Lasp
* REPLIKATIV

**** C. Weilbach's Motivation

***** Free data from cloud and vendor lock-in

***** Ultimate goal: statistical analysis

***** Clone app state/data like we clone code with git


** What is it?
***** For development of distributed applications
***** Based on replicated data types:  CRDTs
***** Can be seen as a distributed database
***** Clojure(Script)

** Noticeable Features

**** Strong eventual consistency
***** No synchronization
****** No talk to other peers before updating
**** Scalability
**** Availability -> Work offline
**** No distinction between client and server
**** Works in browsers, servers and mobile devices
**** Works on JS and JVM environments
**** Updates propagated automatically in both directions
**** Peer-to-peer
**** Gossip like protocol
**** Functional code-base

** Architecture
[[./img/architecture-replikativ.png]]
** Available CRDTs
**** map
**** set
**** lww
**** cdvcs

**** Soon: EDN i.e JSON in Clojure
** Usage Illustration
An simple app that capture task lengths in a project
[[./img/demo.png]]
** SERVER
#+BEGIN_SRC clojure -n
(defn start-server []
  (let [uri   "ws://127.0.0.1:31778"
        store (<?? S (new-mem-store))
        peer  (<?? S (server-peer S store uri))]
    (run-server #'base-routes {:port 8080})
    (<?? S (start peer))
    (<?? S (chan))))
#+END_SRC

** Front end

#+begin_src clojure -n
(def user "mail:alice@stechuhr.de")
(def ormap-id #uuid "07f6aae2-2b46-4e44-bfd8-058d13977a8a")
(def uri "ws://127.0.0.1:31778")
(defonce val-atom (atom {:captures #{}}))

(defn setup-replikativ []
  (go-try
   S
   (let [store  (<? S (new-mem-store))
         peer   (<? S (client-peer S store))
         stage  (<? S (create-stage! user peer))
         stream (stream-into-identity stage
                                      [user ormap-id]
                                      stream-eval-fns
                                      val-atom)]
     (<? S (s/create-ormap! stage
                            :description "captures"
                            :id ormap-id))
     (connect! stage uri)
     {:store  store
      :stage  stage
      :stream stream
      :peer   peer})))
#+end_src

** Front End

  #+BEGIN_SRC clojure -n
(def stream-eval-fns
  {'add (fn [S a new]
            (swap! a update-in [:captures] conj new)
            a)
   'remove (fn [S a new]
             (swap! a update-in [:captures] disj new)
             a)})

(defn add-capture! [state capture]
  (s/assoc! (:stage state)
            [user ormap-id]
            (uuid capture)
            [['add capture]]))
#+end_src


** UI
#+attr_html: :height 750px
[[./img/ui-code.png]]

** Demo

#+BEGIN_NOTES
live demo:

cd /Users/chrislain/workspace/stechuhr

lein run

in chrome: http://localhost:8080/index.html

video: http://replikativ.io/doc/applications.html or https://www.youtube.com/watch?v=LW8v6Cr9BcM&feature=youtu.be

43'36''
#+END_NOTES

* Conclusion

**** Saw overview of CRDTs and REPLIKATIV

**** Makes app dev a lot simpler
***** No need to deal with IO anymore
****** No client or server networking dev needed
***** Just work on your local state and the rest is taken care of
***** No big stack to learn
***** No app to install

* Thank You
**** C. Weilbach
**** M. Shapiro & Co.
**** K. Khüne
**** M. Kleppmann & Co.
**** A. Engelen
* Questions?

* Extra slides

** Json: convergence but...
[[./img/json-wrong.png]]
** Join Semi-Lattice
[[./img/lattice.png]]
** COMMENT TODO References
