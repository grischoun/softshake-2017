# Local variables:
# after-save-hook: org-reveal-export-to-html-and-browse
# org-reveal-title-slide: "<h1>%t</h1> <br> <h3>%a</h3>%e"
# end:

#+Title:  Rapid prototyping with CRDTs and REPLIKATIV
#+Author: Chrislain Razafimahefa
#+Email: razafima@gmail.com

#+REVEAL_ROOT: file:./reveal.js
#+REVEAL_TRANS: none
#+REVEAL_PLUGINS: (notes)

#+REVEAL_HLEVEL: 999
#+REVEAL_HEAD_PREAMBLE: <script src="https://code.jquery.com/jquery-2.2.4.min.js"></script>
#+REVEAL_PREAMBLE: <div id="hidden" style="display:none;"> <div id="header"> <div id="header-left"></div> <div id="header-right"></div> <div id="footer-left"><img src="/Users/chrislain/workspace/teaching/assets/images/digicomp_logo.png" height="50" width="250"></div> </div>   </div>



#+OPTIONS: toc:nil
#+OPTIONS: num:nil
#+OPTIONS: reveal_center:nil

#+OPTIONS: ^:nil                       ## Pour ne pas le laisser interpréter les _


* About me
**** Founder of */Shared Object Sarl/*

**** Past Adventures
***** Java
****** Compiler and VM implementation, J2EE Applications

***** Rails
***** Clojure(Script)



#+BEGIN_NOTES
HANDS UP: CRDTs, Clojure, CAP
#+END_NOTES

* Motivation

**** COMMENT SAY: if there is anything that you can get out of this talk then remember this:
***** Soon it is going to be possible to build applications with the following properties....
**** COMMENT RELIRE: l'intro sur le site de REPLIKATIV pour avoir des idées

****  ????? Comment développer rapidement des applications distribuées (pour le moment des prototypes) avec de jolies propriétés comme:
- liveness
- ne pas passer trop de temps sur le côté serveur
- peer-to-peer
- travailler offline
- automatic conflict resolution
- ....
* Distributed Systems
~ Multiple Machines Used For One Purpose

#+BEGIN_NOTES
Has taken so much importance today:
- big data, blockchain, etc...
#+END_NOTES
* Replication
**** Goal
Have the same data on all replicas
**** Why
***** Increase *Availability*
- Safer systems
***** Reduce *Latency*
- Faster systems
***** Increase *Throughput*
- By increasing the number of available nodes
- Scalabale systems
***** Work *Offline*
* Challenges with Replication
**** COMMENT As soon as there are updates problems arises. If we choose to synchronize the replication (i.e. wait for all the replicas to confirm that replication went well) it is going to be very slow.
If we choose to use asynchronous replication, then  => Conflicts


**** How to deal with UPDATES?
***** Synchronous / Synchronized
****** COMMENT Wait for a confirmation from other replicas before aknowledging the write to the local client
****** Strongly consistent
****** Main issues: Slow and Does not scale
***** Asynchronous
****** COMMENT Apply all the updates locally and replicate asynchronously
****** Fast and Scales
****** Main Issue: CONFLICTS

**** Is there a magical solution that would resolve conflicts automatically?
* CRDTs
*Conflict-free Replicated Data Type*

** Intuition
**** Whatever the order of the operations, whether there are concurrent operations or not, *eventually* all replicas will converge
**** Obtained by forcing operations on the data structures to have simple mathematical properties such as commutativity,...
**** COMMENT OLD
Thanks to mathematical properties => All replicas will *eventually* converge
**** COMMENT OLD
***** On est dans un contexte de multiple writers
***** Quelle est l'idée...
 - ? Quelque soit l'ordre des écritures par les différents acteurs
 - Quelque soit les partial failures
 =>  *Eventually* all replicas will converge
** How it works

**** Two Types

***** Operation based

      Operations are exchanged between nodes

****** COMMENT Commutative

****** COMMENT Make sure operations are not duplicated


***** State based

States are exchanged between nodes

****** COMMENT Commutative
****** COMMENT Associative
******* COMMENT A merge may contain multiple updates so it has to be associative
****** COMMENT Indempotent



** Operation based

**** Ex.: COUNTER
[[./img/op1.png]]

***** Replicas execute local operations

***** Operations propagated to other replicas

***** COMMUTATIVITY => (5 - 4 - 3) = (5 - 3 - 4)

** Operation based


**** If we add multiplication...
[[./img/op2.png]]

**** (5 - 4 - 3) * 2 - 1 != (5 - 3 - 4 - 1) * 2

**** => COMMUTATIVITY is mandatory

** COMMENT Issues in Operation based
[[./img/op3.png]]

**** Must have a semantic of delivering updates only once

**** Must have causal order delivery
** State based

**** TODO show the 'integer + max' example from page 6 of Shapiro

**** TODO On this example illustrate - the merge fct - commutativity - associativity - indempotence

** More advanced data structure: Set

**** Naive approach, i.e. like sequential version

***** when lucky:
[[./img/op-set-naive-ok.png]]


***** Not lucky:
[[./img/op-set-naive-notok.png]]


** Observed-Remove Set

**** Add a tag on each replica to uniquely identify set elements.
  [[./img/or-set.png]]

** Available CRDTs
**** Counter
**** Map
**** Set
**** Ordered Set
**** ...
** ? JSON CRDTs
* REPLIKATIV
* My Contribution
* Demo / Illustration throught the Chat app
* Usage in Industry
**** Json crdts in JS by Kleppmann & co
**** Riak, Soundcloud, ...
* Advantages of all this
**** Less time on server side
**** ...
* Conclusion
